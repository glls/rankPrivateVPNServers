#!/usr/bin/env python3

# Copyright (C) 2018 George Litos
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


import argparse
import datetime
import errno
import getpass
import json
import logging
import os
import pipes
import queue
import re
import socket
import sys
import threading
import time
import urllib.error
import urllib.request
import pycountry
from bs4 import BeautifulSoup
from subprocess import Popen, STDOUT, PIPE


# ServerStatus Exception
class ServerStatusError(Exception):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return repr(self.msg)


# return round-trip avg ms
def ping(ip, cnt=3, wait=0.3):
    ret = 0.0
    pr = Popen(('ping', '-c' + str(cnt), '-i' + str(wait), ip),
               stdout=PIPE, stderr=STDOUT)

    out = str(pr.communicate()[0])
    if 'bytes from' in out:
        # linux
        if sys.platform == "linux" or sys.platform == "linux2":
            ret = float(re.search(r'min/avg/max/mdev = [\d.]+/([\d.]+)', out).groups()[0])
        elif sys.platform == "darwin":
            ret = float(re.search(r'min/avg/max/stddev = [\d.]+/([\d.]+)', out).groups()[0])
        elif sys.platform == "win32":
            ret = float(re.search(r'min/avg/max/stddev = [\d.]+/([\d.]+)', out).groups()[0])
    return ret


# get external IP
def get_ext_ip():
    # requests.get("https://api.ipify.org/?format=json").json()['ip']
    ip = str(urllib.request.urlopen('http://api.ipify.org').read().decode('utf-8'))
    return ip


def get_country_code(country):
    try:
        country_code = pycountry.countries.get(name=country).alpha_2
    except KeyError:
        try:
            country_code = pycountry.countries.get(common_name=country).alpha_2
        except KeyError:
            try:
                country_code = pycountry.countries.get(official_name=country).alpha_2
            except KeyError:
                if country == 'Russia':
                    country_code = "RU"
                elif country == 'South Korea':
                    country_code = "KR"
                elif country == 'USA':
                    country_code = "US"
                else:
                    country_code = "--"

    return country_code


def get_server_list():
    url = 'https://privatevpn.com/serverlist'
    req = urllib.request.Request(url, headers={'User-Agent': 'Mozilla/5.0'})
    with urllib.request.urlopen(req) as response:
        return response.read().decode('utf-8')


def get_server_data():
    # Debug:
    # soup = BeautifulSoup(open('serverlist.htm', 'r'), "html.parser")
    sl = get_server_list()
    soup = BeautifulSoup(sl, "html.parser")
    table = soup.find('table', class_='table-deluxe')
    headers = []
    header = table.find("thead")
    for h in header.find_all('th'):
        text = h.text.replace("\n", "")
        headers.append(text)
    data = []
    rows = table.find_all("tr")
    for row in rows:
        tds = row.find_all("td")
        if len(tds) == 6:
            tmp = tds[0].text.replace("\n", "").split("-")
            country = tmp[0].strip()
            city = tmp[1].strip() if len(tmp) > 1 else ""

            data.append({
                'country': country,
                "country_code": get_country_code(country),
                'city': city,
                'url': tds[1].text.replace("\n", "").strip(),
                'port_tap': tds[2].text.replace("\n", "").strip(),
                'port_tun': tds[3].text.replace("\n", "").strip(),
                'proxy_socks': tds[4].text.replace("\n", "").strip(),
                'proxy_http': tds[5].text.replace("\n", "").strip()
            })
    dt = datetime.datetime.utcnow().__str__()

    return {
        'title': 'PrivateVPN Server list',
        'version': 1,
        'headers': headers,
        'last_check': dt,
        'total': len(rows),
        'servers': data
    }


class ServerStatus(object):
    URL = 'https://privatevpn.com/serverlist'

    # Server list table format
    # Country	Server address	Port OpenVPN-TAP-UDP	OpenVPN-TUN-UDP/TCP	Socks5 Proxy	HTTP Proxy
    MIRROR_URL_FORMAT = '{0}'
    MIRRORLIST_ENTRY_FORMAT = MIRROR_URL_FORMAT + "\n"
    DISPLAY_TIME_FORMAT = '%Y-%m-%d %H:%M:%S UTC'
    PARSE_TIME_FORMAT = '%Y-%m-%dT%H:%M:%SZ'
    # Required for the last_check field, which oddly includes microseconds.
    # PARSE_TIME_FORMAT_WITH_USEC = '%Y-%m-%dT%H:%M:%S.%fZ'
    PARSE_TIME_FORMAT_WITH_USEC = '%Y-%m-%d %H:%M:%S.%f'
    # Recognized list sort types and their descriptions.
    SORT_TYPES = {
        'rate': 'avarage ping',
        'country': 'server\'s location',
    }

    # Initialize
    def __init__(
            self,
            verbose=False,
            threads=5
    ):
        # The parsed JSON object.
        self.json_obj = {}
        # Display extra information.
        self.verbose = verbose
        # Threads
        self.threads = threads

    def retrieve(self):
        """Retrieve the current server status JSON data."""
        self.json_obj = None

        if not self.json_obj:
            try:
                self.json_obj = get_server_data()
            except (urllib.error.URLError, socket.timeout) as e:
                raise ServerStatusError('failed to retrieve server data: ({})'.format(e))
            except ValueError as e:
                raise ServerStatusError('failed to parse retrieved server data: ({})'.format(e))

    def get_obj(self):
        """Return the JSON object, retrieving new data if necessary."""
        if not self.json_obj:
            self.retrieve()

        return self.json_obj

    def get_servers(self):
        a = self.get_obj()
        b = a['servers']
        return b

    def filter(
            self,
            servers=None,
            countries=None,
            include=None,
            exclude=None,
            protocols=None
    ):
        """Filter using different parameters."""
        if servers is None:
            servers = self.get_servers()

        t = time.time()
        n = 0

        # Make country arguments case-insensitive.
        uc_countries = tuple(c.upper() for c in countries) if countries else None
        for server in servers:
            # Filter by country.
            if countries and not (
                    server['country'].upper() in uc_countries or
                    server['country_code'].upper() in uc_countries
            ):
                continue
            # Filter by protocol.
            if protocols and not server['protocol'] in protocols:
                continue
            # Filter by regex.
            # TODO: Find a better way to do this.
            if include:
                for regex in include:
                    if re.search(regex, server['url']):
                        break
                else:
                    continue
            if exclude:
                discard = False
                for regex in exclude:
                    if re.search(regex, server['url']):
                        discard = True
                        break
                if discard:
                    continue

            # Yield if we're still here.
            yield server

    def sort(self, servers=None, by=None):
        """Sort using different parameters."""
        if servers is None:
            servers = self.get_servers()
        # Ensure that "servers" is a list that can be sorted.
        if not isinstance(servers, list):
            servers = list(servers)

        if by == 'rate':
            servers = self.rate(servers)
        elif by in ('country', 'country_code'):
            servers.sort(key=lambda m: m[by])
        return servers

    def rate(self, servers=None, threads=5):
        if servers is None:
            servers = self.get_servers()
        if not threads:
            threads = self.threads
        # Ensure that "servers" is a list and not a generator.
        if not isinstance(servers, list):
            servers = list(servers)

        if not servers:
            logging.warning('no servers selected for rating')
            return servers

        # Ensure a sane number of threads.
        if threads < 1:
            threads = 1
        else:
            threads = min(threads, len(servers))

        rates = {}

        # URL input queue.Queue
        q_in = queue.Queue()
        # URL and rate output queue.Queue
        q_out = queue.Queue()

        def worker():
            while True:
                url = q_in.get()
                rate = ping(url)
                q_out.put((url, rate))
                q_in.task_done()

        # Launch threads
        for i in range(threads):
            t = threading.Thread(target=worker)
            t.daemon = True
            t.start()

        # Load the input queue.Queue
        url_len = max(len(m['url']) for m in servers)
        for server in servers:
            logging.info("pinging {}".format(server['url']))
            q_in.put(server['url'])

        q_in.join()

        # Get the results
        # The "in servers" loop is just used to ensure that the right number of
        # items is retrieved.

        # Display some extra data.
        header_fmt = '{{:{:d}s}}  {{:>10s}}'.format(url_len)
        logging.info(header_fmt.format('Server', 'Ping'))
        fmt = '{{:{:d}s}}  {{:8.3f}} ms'.format(url_len)

        # Loop over the servers just to ensure that we get the rate for each server.
        # The value in the loop does not (necessarily) correspond to the server.
        for _ in servers:
            url, rate = q_out.get()
            logging.info(fmt.format(url, rate))
            rates[url] = rate
            q_out.task_done()

        # Sort by rate.
        rated_servers = [m for m in servers if rates[m['url']] > 0]
        rated_servers.sort(key=lambda m: rates[m['url']], reverse=False)

        return rated_servers + [m for m in servers if rates[m['url']] == 0]

    def display_time(self, t=None):
        '''Format a time for display.'''
        return time.strftime(self.DISPLAY_TIME_FORMAT, t)

    def get_serverlist(self, servers=None, include_country=False, cmd=None):
        if servers is None:
            servers = self.get_servers()
        if cmd is None:
            cmd = '?'
        else:
            cmd = 'rankpvpn ' + ' '.join(pipes.quote(x) for x in cmd)

        width = 80
        colw = 11
        header = '# PrivateVPN Server list #'.center(width, '#')
        border = '#' * len(header)
        serverlist = '{}\n{}\n{}\n'.format(border, header, border) + \
                     '\n' + \
                     '\n'.join(
                         '# {{:<{:d}s}} {{}}'.format(colw).format(k, v) for k, v in (
                             ('With:', cmd),
                             ('When:', self.display_time(time.gmtime())),
                             ('From:', ServerStatus.URL),
                         )
                     ) + \
                     '\n\n'

        country = None

        # servers may be a generator so "if servers" will not work
        no_servers = True
        for server in servers:
            no_servers = False
            # Include country tags. This is intended for lists that are sorted by country.
            if include_country:
                c = '{} [{}]'.format(server['country'], server['country_code'])
                if c != country:
                    if country:
                        serverlist += '\n'
                    serverlist += '# {}\n'.format(c)
                    country = c
            # serverlist += ServerStatus.MIRRORLIST_ENTRY_FORMAT.format(server['url'])
            serverlist += server['url'] + "\n"

        if no_servers:
            return None
        else:
            return serverlist

    def list_countries(self):
        countries = dict()
        for m in self.get_servers():
            k = (m['country'], m['country_code'])
            try:
                countries[k] += 1
            except KeyError:
                countries[k] = 1
        return countries


class ListCountries(argparse.Action):
    '''
    Action to list countries along with the number of mirrors in each.
    '''

    def __call__(self, parser, namespace, values, option_string=None):
        ms = ServerStatus()
        countries = ms.list_countries()
        w = max(len(c) for c, cc in countries)
        n = len(str(max(countries.values())))
        fmt = '{{:{:d}s}} {{}} {{:{:d}d}}'.format(w, n)
        for (c, cc), n in sorted(countries.items(), key=lambda x: x[0][0]):
            print(fmt.format(c, cc, n))
        sys.exit(0)


def print_server_info(servers, time_fmt=ServerStatus.DISPLAY_TIME_FORMAT):
    '''
    Print information about each mirror to STDOUT.
    '''
    if servers:
        if not isinstance(servers, list):
            servers = list(servers)
        ks = sorted(k for k in servers[0].keys() if k != 'url')
        l = max(len(k) for k in ks)
        fmt = '{{:{:d}s}} : {{}}'.format(l)
        for m in servers:
            print('{}'.format(m['url']))
            for k in ks:
                v = m[k]
                print(fmt.format(k, v))
            print()


def add_arguments(parser):
    '''
    Add arguments to the argument parser.
    '''
    parser = argparse.ArgumentParser(description='Retrieve and filter the list of PrivateVPN servers')

    parser.add_argument(
        '--list-countries', action=ListCountries, nargs=0,
        help='Display a table of the distribution of servers by country.'
    )

    parser.add_argument(
        '--save', metavar='<filepath>',
        help='Save the server-list to the given path.'
    )

    sort_help = '; '.join('"{}": {}'.format(k, v) for k, v in ServerStatus.SORT_TYPES.items())
    parser.add_argument(
        '--sort', choices=ServerStatus.SORT_TYPES,
        help='Sort the serverlist. {}.'.format(sort_help)
    )

    parser.add_argument(
        '--threads', type=int, metavar='n',
        help='The number of threads to use when rating servers.'
    )

    parser.add_argument(
        '--verbose', action='store_true',
        help='Print extra information to STDERR. Only works with some options.'
    )

    parser.add_argument(
        '--info', action='store_true',
        help='Print server information instead of a server list. Filter options apply.'
    )

    parser.add_argument(
        '--ip', action='store_true',
        help='Display your public IP.'
    )

    filters = parser.add_argument_group(
        'filters',
        'The following filters are inclusive, i.e. the returned list will only '
        'contain servers for which all of the given conditions are met.'
    )

    filters.add_argument(
        '-c', '--country', dest='countries', action='append', metavar='<country>',
        help='Match one of the given countries (case-sensitive). Use "--list-countries" to see which are available.'
    )

    filters.add_argument(
        '-f', '--fastest', type=int, metavar='n',
        help='Return the n fastest servers that meet the other criteria.'
             ' Do not use this option without other filtering options.'
    )

    filters.add_argument(
        '-i', '--include', metavar='<regex>', action='append',
        help='Include servers that match <regex>.'
    )

    filters.add_argument(
        '-x', '--exclude', metavar='<regex>', action='append',
        help='Exclude servers that match <regex>.'
    )

    filters.add_argument(
        '-n', '--number', type=int, metavar='n',
        help='Return at most n servers.'
    )

    filters.add_argument(
        '-r', '--random', action='store_true',
        help='Choose a random server.'
    )

    # not needed
    # filters.add_argument(
    #     '-p', '--protocol', dest='protocols', action='append', metavar='<protocol>',
    #     help='Match one of the given protocols, e.g. "http", "ftp".'
    # )

    return parser


def parse_args(args=None):
    '''
    Parse command-line arguments.
    '''
    parser = argparse.ArgumentParser(
        description='retrieve and filter a list of the PrivateVPN servers'
    )
    parser = add_arguments(parser)
    options = parser.parse_args(args)
    return options


# Process options
def process_options(options, ms=None, servers=None):
    if not ms:
        ms = ServerStatus(
            verbose=options.verbose,
            threads=options.threads
        )

    if servers is None:
        servers = ms.get_servers()

    # Filter
    servers = ms.filter(
        servers,
        countries=options.countries,
        include=options.include,
        exclude=options.exclude
        # protocols=options.protocols
    )

    if options.fastest and options.fastest > 0:
        servers = ms.sort(servers, by='rate')
        servers = servers[:options.fastest]

    if options.sort and not (options.sort == 'rate' and options.fastest):
        servers = ms.sort(servers, by=options.sort)

    if options.number:
        servers = list(servers)[:options.number]

    return ms, servers


def main(args=None, configure_logging=False):
    if args:
        cmd = tuple(args)
    else:
        cmd = sys.argv[1:]

    options = parse_args(args)

    if configure_logging:
        if options.verbose:
            level = logging.INFO
        else:
            level = logging.WARNING
        logging.basicConfig(
            format='[{asctime:s}] {levelname:s}: {message:s}',
            style='{',
            datefmt='%Y-%m-%d %H:%M:%S',
            level=level
        )

    try:
        ms, servers = process_options(options)
        if servers is not None and not isinstance(servers, list):
            servers = list(servers)
        if not servers:
            sys.exit('ERROR: No servers found')
        include_country = options.sort == 'country'
        # Convert the generator object to a list for re-use later.
        if options.info:
            print_server_info(servers)
            return
        else:
            serverlist = ms.get_serverlist(servers, include_country=include_country, cmd=cmd)
            if serverlist is None:
                sys.exit('ERROR: No servers found')
    except ServerStatusError as e:
        sys.exit('ERROR: {}\n'.format(e.msg))

    if options.save:
        try:
            with open(options.save, 'w') as f:
                f.write(serverlist)
        except IOError as e:
            sys.exit('ERROR: {}\n'.format(e.strerror))
    else:
        print(serverlist)


def run_main(args=None, **kwargs):
    try:
        main(args, **kwargs)
    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    run_main(configure_logging=True)

#TODO:
# test -i regex
# test -x regex